@page "{id:int}"
@model Support_Manager_Web_Group.Pages.Tickets.DetailsModel
@{
    ViewData["Title"] = $"Ticket #{Model.Ticket?.TicketID} Details";
}

@if (Model.Ticket == null)
{
    <h1 class="text-danger">Ticket Not Found</h1>
    <p>The requested ticket could not be found or you do not have permission.</p>
    <a asp-page="./Index" class="btn btn-secondary mt-3">Back to List</a>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Details for Ticket #@Model.Ticket.TicketID</h1>
        <div>
            @if (Model.CanPerformActions)
            {
                <a asp-page="./Edit" asp-route-id="@Model.Ticket.TicketID" class="btn btn-primary me-2"><i class="fas fa-edit"></i> Edit</a>
            }
            <a asp-page="./Index" class="btn btn-secondary"><i class="fas fa-list"></i> Back to List</a>
        </div>
    </div>
    <hr />

    @* --- Ticket Details Row --- *@
    <div class="row">
        <div class="col-md-7">
            <h4>@Html.DisplayFor(model => model.Ticket.Title)</h4>
            <dl class="row details-list">
                <dt class="col-sm-4">Status</dt>
                <dd class="col-sm-8"><span class="badge @GetStatusBadgeClass(Model.Ticket.Status?.StatusName)">@(Model.Ticket.Status?.StatusName ?? "N/A")</span></dd>
                <dt class="col-sm-4">Priority</dt>
                <dd class="col-sm-8"><span class="badge @GetPriorityBadgeClass(Model.Ticket.Priority?.PriorityName)">@(Model.Ticket.Priority?.PriorityName ?? "N/A")</span></dd>
                <dt class="col-sm-4">Category</dt>
                <dd class="col-sm-8">@(Model.Ticket.Category ?? "N/A")</dd>
                <dt class="col-sm-12 mt-3">Description</dt>
                <dd class="col-sm-12"><pre class="description-box">@Html.DisplayFor(model => model.Ticket.Description)</pre></dd>
            </dl>
        </div>
        <div class="col-md-5">
            <h5>Details</h5>
            <dl class="row details-list">
                <dt class="col-sm-5">Submitted By</dt>
                <dd class="col-sm-7">@(Model.Ticket.Submitter?.FullName ?? "N/A")</dd>
                <dt class="col-sm-5">Date Submitted</dt>
                <dd class="col-sm-7">@Model.Ticket.DateSubmitted.ToString("f")</dd>
                <dt class="col-sm-5">Assigned To</dt>
                <dd class="col-sm-7">@(Model.Ticket.Assignee?.FullName ?? "[Unassigned]")</dd>
                <dt class="col-sm-5">Date Resolved</dt>
                <dd class="col-sm-7">@(Model.Ticket.DateResolved?.ToString("f") ?? "N/A")</dd>
            </dl>
        </div>
    </div>

    @* --- Comments Section --- *@
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">Comments (@Model.Comments.Count)</h5>
                </div>
                @* Display Existing Comments *@
                <div class="card-body comment-section p-3">
                    @if (!Model.Comments.Any())
                    {
                        <p class="text-muted fst-italic mb-0">No comments have been added yet.</p>
                    }
                    else
                    {
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="comment mb-3 pb-2 border-bottom">
                                <p class="comment-text mb-1">@Html.DisplayFor(m => comment.CommentText)</p>
                                <small class="text-muted comment-meta">
                                    By @(comment.User?.FullName ?? "Unknown User") on @comment.DateCommented.ToString("yyyy-MM-dd HH:mm")
                                </small>
                            </div>
                        }
                    }
                </div>
                @* Add New Comment Form (Show only if user CanComment) *@
                @if (Model.CanComment)
                {
                    <div class="card-footer bg-light">
                        <form method="post" asp-page-handler="AddComment" asp-route-id="@Model.Ticket.TicketID">
                            @Html.AntiForgeryToken()
                            @* Display validation errors specific to the comment form *@
                            <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>
                            <div class="mb-2">
                                <label asp-for="NewCommentText" class="form-label fw-semibold"></label>
                                <textarea asp-for="NewCommentText" class="form-control form-control-sm" rows="3" placeholder="Enter your comment..."></textarea>
                                <span asp-validation-for="NewCommentText" class="text-danger"></span>
                            </div>
                            <button type="submit" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-plus"></i> Add Comment
                            </button>
                        </form>
                    </div>
                }
            </div>
        </div>
    </div>

    @* Attachments section excluded for simplicity *@

    @* Delete Button Form (Keep if needed) *@
    @if (User.IsInRole("IT Manager"))
    {
        <div class="mt-4">
            <form method="post" asp-page-handler="Delete" asp-route-id="@Model.Ticket.TicketID" onsubmit="return confirm('Are you sure you want to permanently delete Ticket #@Model.Ticket.TicketID?');" style="display: inline;">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-danger"><i class="fas fa-trash-alt"></i> Delete Ticket</button>
            </form>
        </div>
    }

} @* End of else block where Model.Ticket is not null *@


@* Badge Helper Functions (Keep from previous response) *@
@functions {
    private string GetStatusBadgeClass(string statusName) { return statusName switch { "Open" => "bg-primary text-white", "Assigned" => "bg-info text-dark", "In Progress" => "bg-warning text-dark", "Pending User Response" => "bg-secondary text-white", "Resolved" => "bg-success text-white", "Closed" => "bg-dark text-white", _ => "bg-light text-dark" }; }
    private string GetPriorityBadgeClass(string priorityName) { return priorityName switch { "Low" => "bg-success text-white", "Medium" => "bg-warning text-dark", "High" => "bg-danger text-white", "Critical" => "bg-danger border border-dark fw-bold", _ => "bg-light text-dark" }; }
}

@* Add CSS to site.css: .comment-section { max-height: 400px; ... } etc. *@

