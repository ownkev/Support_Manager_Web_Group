@page
@model Support_Manager_Web_Group.Pages.Tickets.IndexModel
@{
    ViewData["Title"] = Model.IsITStaff ? "Manage Tickets" : "My Submitted Tickets";
}

<h1>@ViewData["Title"]</h1>

<p><a asp-page="Create" class="btn btn-primary mb-3"><i class="fas fa-plus-circle"></i> Submit New Ticket</a></p>

@if (TempData["SuccessMessage"] != null)
{
     <div class="alert alert-success alert-dismissible fade show">@TempData["SuccessMessage"]<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>
}
@if (TempData["ErrorMessage"] != null)
{
     <div class="alert alert-danger alert-dismissible fade show">@TempData["ErrorMessage"]<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>
}

@if (!Model.Tickets.Any())
{
     <div class="alert alert-info mt-3">No tickets found.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover table-sm">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Category</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th>Submitted</th>
                    @if (Model.IsITStaff)
                    {
                        <th>Submitted By</th>
                        <th>Assigned To</th>
                    }
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Tickets)
                {
                    <tr>
                        <td>@item.TicketID</td>
                        <td><a asp-page="./Details" asp-route-id="@item.TicketID" title="@item.Title">@Truncate(item.Title, 50)</a></td>
                        <td>@Html.DisplayFor(m => item.Category)</td>
                        <td><span class="badge @GetStatusBadgeClass(item.Status?.StatusName)">@(item.Status?.StatusName ?? "N/A")</span></td>
                        <td><span class="badge @GetPriorityBadgeClass(item.Priority?.PriorityName)">@(item.Priority?.PriorityName ?? "N/A")</span></td>
                        <td>@item.DateSubmitted.ToString("yyyy-MM-dd HH:mm")</td>
                        @if (Model.IsITStaff)
                        {
                            <td>@(item.Submitter?.FullName ?? "N/A")</td>
                            <td>@(item.Assignee?.FullName ?? "[Unassigned]")</td>
                        }
                        <td class="text-nowrap">
                            <a asp-page="./Details" asp-route-id="@item.TicketID" class="btn btn-sm btn-outline-info me-1" title="View Details"><i class="fas fa-eye"></i></a>
                            @if (Model.IsITStaff && item.StatusID != 6)
                            { // Edit for IT if not Closed
                                <a asp-page="./Edit" asp-route-id="@item.TicketID" class="btn btn-sm btn-outline-secondary me-1" title="Edit"><i class="fas fa-edit"></i></a>
                            }
                            @if (Model.IsITManager)
                            { // Delete for Manager only
                                <form method="post" asp-page-handler="Delete" asp-route-id="@item.TicketID" onsubmit="return confirm('Delete Ticket #@item.TicketID?');" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete"><i class="fas fa-trash-alt"></i></button>
                                </form>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@functions {
    private string GetStatusBadgeClass(string statusName) { return statusName switch { "Open" => "bg-primary text-white", "Assigned" => "bg-info text-dark", "In Progress" => "bg-warning text-dark", "Pending User Response" => "bg-secondary text-white", "Resolved" => "bg-success text-white", "Closed" => "bg-dark text-white", _ => "bg-light text-dark" }; }
    private string GetPriorityBadgeClass(string priorityName) { return priorityName switch { "Low" => "bg-success text-white", "Medium" => "bg-warning text-dark", "High" => "bg-danger text-white", "Critical" => "bg-danger border border-dark fw-bold", _ => "bg-light text-dark" }; }
    private string Truncate(string value, int maxLength) { if (string.IsNullOrEmpty(value)) return value; return value.Length <= maxLength ? value : value.Substring(0, maxLength) + "..."; }
}
